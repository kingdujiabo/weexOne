<template>
    <div>
      <nav-bar-normal></nav-bar-normal>
      <list class="read-list">
          <refresh class="refresh-view" onrefresh="refresh" display="{{refresh_display}}">
            <text class="refresh-arrow">刷新</text>
          </refresh>
          <cell class="top-slider">
            <slider class="top-slider" append="tree" interval="3000" auto-play="true" if={{showSliderCell}}>
              <div class="slider-pages" repeat="item in imageList">
                <image class="img" src="{{item.cover}}" itemid="{{item.id}}" itemtitle="{{item.title}}" onclick="onSliderItemClick"></image>
              </div>
              <indicator class="indicator"></indicator>
            </slider>
          </cell>
          <cell class="reade-rowcontent" index="{{$index}}" repeat="{{item in readingList}}">
            <div class="reader-content-item" if="{{item.showstype1}}" cid="{{item.content.content_id}}" onclick="onReadCellClick">   //因为获取的数据有三种type,而且三种type内容存贮的键名不同, 所以我们在这里得根据type不同写三个展示内容的元素块, 根据其type的不同决定是不是渲染
              <read-item title="{{item.content.hp_title}}" author="{{item.content.author[0].user_name}}"content="{{item.content.guide_word}}"></read-item>
            </div>
            <div class="reader-content-item" if="{{item.showstype2}}" cid="{{item.content.id}}" onclick="onSerialCellClick">   //因为获取的数据有三种type,而且三种type内容存贮的键名不同, 所以我们在这里得根据type不同写三个展示内容的元素块, 根据其type的不同决定是不是渲染
              <read-item title="{{item.content.title}}" author="{{item.content.author.user_name}}"content="{{item.content.excerpt}}"></read-item>
            </div>
            <div class="reader-content-item" if="{{item.showstype3}}" cid="{{item.content.question_id}}" onclick="onQuestionCellClick">   //因为获取的数据有三种type,而且三种type内容存贮的键名不同, 所以我们在这里得根据type不同写三个展示内容的元素块, 根据其type的不同决定是不是渲染
              <read-item title="{{item.content.question_title}}" author="{{item.content.answer_title}}"content="{{item.content.answer_content}}"></read-item>
            </div>
          </cell>
          <loading class="refresh-view" display="{{loading_display}}" onloading="onloading">
            <div class="">
              <text class="refresh-arrow" if="{{(refresh_display==='hide')}}">加载更多</text>
            </div>
          </loading>
      </list>
    </div>
</template>
<style>
  .read-list {
    margin-left: 20px;
    margin-right: 20px;
  }
  .top-slider{
    flex-direction: row;
    height: 360px;
    width: 750px;
  }
  .img{
    height: 360px;
    width: 750px;
  }
  .indicator {
      position: absolute;
      width: 690px;
      height: 400px;
      top: 140px;
      left: 240px;
      itemColor: #dddddd;
      itemSelectedColor: #45b5f0;
      item-size: 15;
    }

    .reader-content-item {
      justify-content: center;
      border-bottom-width: 1px;
      border-bottom-color: #d4d4d4;
      padding: 20px;
    }
    .refresh-view {
        height: 80px;
        width: 750px;
        justify-content: center;
        align-items: center;
    }
    .refresh-arrow {
        font-size: 30px;
        color: #45b5f0;
    }
</style>
<script>
  require('weex-components');
  var modal = require('@weex-module/modal');
  var apis = require('../common/api');
  var navigator = require('@weex-module/navigator');
  module.exports = {
    data: {
      imageList: [],
      readingList: [],
      contentIndex: 0,        //轮播下的内容块的默认路径后的index值,   默认的页数
      refresh_display:'hide',
      loading_display: 'hide',
      showSliderCell: false,  //如果沒有加載出來輪播 就不顯示
      baseURL: '',
    },
    created: function () {      // 初始化执行的一些方法
      var self = this;
      self.getCarouselData();
      self.getReadingIndex(self.contentIndex, false);
      var base = apis.getBaseUrl(self.$getConfig().bundleUrl,true);
      this.baseURL = base;
      // console.log("kankan", base)       //  http://localhost:12581/index.html?page=./dist/
    },
    methods: {
      //有个问题每次拖拽都会激发一次
      refresh: function () {
        var self = this;
        self.refresh_display = 'show';
        self.getCarouselData();
        self.getReadingIndex(self.contentIndex,false)
        self.refresh_display = 'hide';
        console.log(this.readingList)
      },

      onloading: function () {
        var self = this;
        self.refresh_display = 'show';
        self.loading_display = 'show';
        self.getReadingIndex(++self.contentIndex,true);
        self.refresh_display = 'hide';
        self.loading_display = 'hide';
      },

      getCarouselData: function () {          //获取指定路径的图片地址及其他信息
        var self = this;
        self.showSliderCell = false;
        apis.getReadingCarousel(function (ret) {
              self.imageList = ret.data;
              self.showSliderCell = true;
          });

      },

      onSliderItemClick: function (e) {
        var self = this;
        var itemid = e.target.attr.itemid;
        var title = e.target.attr.itemtitle;
        var params = {
          'url' : this.baseURL + 'modules/carouse-list.js?id=' + itemid + '&title=' + title,
          'animated' : 'true'
        };
        navigator.push(params, function () {
          
        })
      },

      getReadingIndex: function (index,loadmore) {        //获取轮播图 下面的文本内容, 添加type标示
          let self = this;
          apis.getReadingIndex(index, function (ret) {
            if (!loadmore) {
                  self.readingList = [];
              }
            ret.data.filter((item) => {
              item.items.filter((item) => {
                item.showstype1 = item.type === 1;
                item.showstype2 = item.type === 2;
                item.showstype3 = item.type === 3;
                self.readingList.push(item)
              })
            })
          })
      },
      //type1
      onReadCellClick: function (e) {
        var self = this;
        var itemid = e.target.attr.cid;
        // console.log(itemid)
        this.openEssayDetail(itemid)
      },

      openEssayDetail: function (itemid) {
        var vm = this;
        var params = {
          'url': this.baseURL + 'modules/essay-detail.js?id=' + itemid,
          'animated': 'true'
        };
        navigator.push(params, function (e) {

        })
      },
      //type2
      onSerialCellClick: function (e) {
        var self = this;
        var itemid = e.target.attr.cid;
        this.openSerialCeDetail(itemid);
      },

      openSerialCeDetail: function (itemid) {
        var vm = this;
        var params = {
          'url' : this.baseURL + 'modules/serial-detail.js?id=' + itemid,
          'animated' : 'true'
        };
        navigator.push(params, function (e) {

        })
      },

      //type3
      onQuestionCellClick: function (e) {
        var self = this;
        var itemid = e.target.attr.cid;
        this.openQuestionDetail(itemid)
      },

      openQuestionDetail: function (itemid) {
        var vm = this;
        var params = {
          'url' : this.baseURL + 'modules/question-detail.js?id=' + itemid,
          'animated' : 'true'
        };
        navigator.push(params, function (e) {

        })
      }
    }
  }

</script>
